Janusz planuje zrobić zakupy! Oszczędność naszego bohatera spowodowała, że zamierza bardzo dokładnie zaplanować swoją trasę. 
Janusz wszystkie produkty kupuje na promocjach. Niestety promocje na produkty, które chce kupić występują w różnych 
sklepach oraz w różne dni! Klucz do sukcesu to jak najmniejszy koszt wojaży do wybranych sklepów! 
Na koszt składa się czas oraz odległość. Nasz bohater wyliczył, że jedna minuta jego trasy jest warta 18 gr,
zaś każdy kilometr przejechany automobilem 49 gr.

Nasz rodak niewątpliwie posiada umiejętności kartografa (przynajmniej tak uważa jego syn...),
co pozwoliło na wykreślenie dokładnej mapy okolicznych sklepów. Niestety nie zna czasu i odległości pomiędzy
każdym ze sklepów, jednakże jego aktualna wiedza jest wystarczająca aby połączenia między placówkami tworzyły
spójną całość. Spora ilość prostych linii łączących miejsca zakupów, odległości i czas naniesione na schemat
przyprawiły Janusza o ból głowy.

Napisz program, który pomoże naszemu bohaterowi zaoszczędzić możliwie największą liczbę pieniędzy na trasie dom - wybrany sklep.

WEJŚCIE
Program wczytuje liczbę naturalną V, która definiuje ile sklepów jest w okolicy (V-1). Następnie program powinien
wczytać liczbę naturalną E, która jest liczbą połączeń pomiędzy sklepami. W kolejnym kroku program powinien
wczytać E sekwencji A B l0 t0 l1 t1, gdzie A i B to liczby odpowiadające placówkom naniesionym na mapę,
zaś l0 t0 to długość i czas na trasie z A do B, a l1 t1 z B do A. Następnie algorytm powinien
wczytać wartość S będącą ilością sklepów oraz S wartości, które będą identyfikatorami sklepów,
które nasz bohater odwiedzi podczas wojaży trwających S dni. Numerem 0 na schemacie Janusza jest oznaczony jego dom.

0 <= A, B, V, S, l0, t0, l1, t1 <= 30 000
0 <= E <= 1 000 000 000
0 <= V <= 30000

WYJŚCIE
Na wyjściu algorytm powinien wyświetlić średnią arytmetyczną najmniejszych możliwych kosztów z każdego dnia.
Wynik powinien być podany z precyzją do trzech miejsc po przecinku.


PRZYKŁADOWE WEJŚCIE
4 5
0 1 8.0 12 5.0 11
0 2 7.0 12 4.0 11
0 3 14.0 25 11.0 20
1 3 8.0 11 4.0 11
2 3 7.0 11 7.0 11
2 1 3
PRZYKŁADOWE WYJŚCIE
14.940

======================================================= 2 =======================================================

Podczas zakupów Janusz spotkał swojego starego znajomego Zbyszka. Zbyszek jest bardzo rozsądnym facetem i podobnie do Janusza
jest bardzo oszczędny. Nasz bohater pochwalił się swoim procesem optymalizacji. 
Jednak nie zrobiło to żadnego wrażenia na Zbyszku. Ten już miał podobny pomysł i dodatkowo go usprawnił.
Ulepszenie polegało na tym, żeby zarejestrować się w aplikacji umożliwiającej przewóz innych obywateli za pieniądze.
"To nie głupi pomysł!" - pomyślał Janusz, skoro i tak przemieszcza się po mieście dlaczego nie miałby tego wykorzystać i zarobić!

Usprawnij poprzedni program tak by brał pod uwagę ewentualne zyski naszego rodaka.

WEJŚCIE
Program wczytuje liczbę naturalną V, która definiuje ile sklepów jest w okolicy. 
Następnie program powinien wczytać liczbę naturalną E, która jest liczbą połączeń pomiędzy sklepami,
które naniósł na swój plan Janusz. W kolejnym kroku program powinien wczytać E sekwencji A B l0 t0 p0 l1 t1 p1,
gdzie A i B to liczby odpowiadające placówkom naniesionym na mapę, zaś l0 t0 p0 to długość, czas i ewentualny zarobek
na trasie z A do B, a l1 t1 p1 z B do A. Następnie algorytm powinien wczytać wartość S będącą ilością sklepów oraz S wartości,
które będą identyfikatorami sklepów, które nasz bohater odwiedzi podczas wojaży trwających S dni.
Numerem 0 na schemacie Janusza jest oznaczony jego dom.

0 <= A, B, V, S, l0, t0, p0, l1, t1, p1 <= 30 000
0 <= E <= 1 000 000 000
0 <= V <= 30000

WYJŚCIE
Na wyjściu algorytm powinien wyświetlić średnią arytmetyczną najmniejszych możliwych kosztów z każdego dnia.
Wynik powinien być podany z precyzją do trzech miejsc po przecinku. Może dojść do sytuacji, gdy podróżowanie
na pewnym odcinku będzie przynosiło Januszowi ciągłe profity. W takiej sytuacji należy zmusić naszego bohatera
by szybko wracał do domu ze swoimi zakupami, zanim zrobi to jego ukochana, zniecierpliwiona Grażyna, wyświetlając komunikat "DO DOMU!".

PRZYKŁADOWE WEJŚCIE
4 5
0 1 8.0 12 0 5.0 11 0
0 2 7.0 12 0 4.0 11 0
0 3 14.0 25 0 11.0 20 10
1 3 8.0 11 0 4.0 11 0
2 3 7.0 11 0 7.0 11 0
2 1 3
PRZYKŁADOWE WYJŚCIE
10.250

======================================================= 3 =======================================================

W związku z tym, że naszemu bohaterowi udało się zoptymalizować drogę na zakupy, czas na doskonalenie poruszania się po sklepie.
Szukane przez naszego bohatera produkty znajdują się na konkretnych stanowiskach tj. stoisko mięsne,
stoisko rybne, stoisko piekarnicze... Dodatkowo nasz rodak nie bardzo chce odwiedzać stoiska,
które nie zawierają interesujących go produktów. Musi oszczędzać swój czas!
Oczywiście wykluczenie nieinteresujących nas stanowisk w sklepie, nie wyklucza dotarcia do tych niezbędnych.

Stanowiska łączą różne drogi, a na nich znajdują się półki z różnymi produktami.
Problemem są czające się na każdej półce promocje, które z pewnością skuszą naszego bohatera.
Niesamowicie opłacalne oferty na niepotrzebne przedmioty mogłyby skłonić Janusza do nieoczekiwanych zakupów.
Utożsamianych z niepotrzebnymi wydatkami. Oczywiście, czym droższy produkt na ścieżce tym zakupy stają
się mniej opłacalna dla Janusza. Na szczęście taka sytuacja miałaby miejsce tylko raz, po co dwa razy kupować to samo?!
Z tego powodu musi ograniczyć tego typu wydatki. Plan jest prosty odwiedzić jedynie interesujące Janusza stanowiska
i ograniczyć koszty zakupu produktów promocyjnych z półek.

Niestety nasz mistrz oszczędzania posiada cały plan sklepu i nie potrafi poradzić sobie ze znalezieniem najlepszej ścieżki
do wszystkich interesujących go produktów. Ponownie potrzebuje Twojej pomocy!

WEJŚCIE
Algorytm na wejściu otrzymuje liczbę M i N, M mówi o liczbie stanowisk, zaś N o ilości połączeń pomiędzy nimi.
Następnie program powinien wczytać M wartości 0 lub 1. 0 jeśli stoisko nie interesuje Janusza i 1 w przeciwnym wypadku.
Kolejno program powinien wczytać N sekwencji wartości A B V, gdzie A B określa numery odpowiednich stanowisk,
a V to liczba całkowitą będąca dodatkowym kosztem na drodze pomiędzy nimi.

0 <= N, M, A, B, V <= 2 000 000 000

WYJŚCIE
Program powinien wypisać całkowitą ilość dodatkowych kosztów, jaką poniesie Janusz, poruszając się pomiędzy wybranymi stanowiskami.

PRZYKŁADOWE WEJŚCIE
4 6
1 1 0 1
0 2 5
1 0 4
1 2 2
1 3 1
3 0 7
3 2 3 
PRZYKŁADOWE WYJŚCIE
5

======================================================= 4 =======================================================
